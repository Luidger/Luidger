{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP81vkNlf+iL3DrvXAzFVdC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Luidger/Luidger/blob/main/Super%20trunfo%20avan%C3%A7ado%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "HHZbO0V2zQDx",
        "outputId": "250b0a44-d91a-443c-a1cb-24b7f8b21bc5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== CADASTRO DO SUPER TRUNFO DE CIDADES ===\n",
            "\n",
            "--- Cadastro do Estado 1 de 8 ---\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-e6384e0c12d7>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 130\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-2-e6384e0c12d7>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mestados\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"=== CADASTRO DO SUPER TRUNFO DE CIDADES ===\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m     \u001b[0mcadastrar_estado\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestados\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-2-e6384e0c12d7>\u001b[0m in \u001b[0;36mcadastrar_estado\u001b[0;34m(estados)\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mestados\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mEstado\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\n--- Cadastro do Estado {i+1} de 8 ---\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m         \u001b[0mestados\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnome\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Nome do estado: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# 4 cidades por estado\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1175\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1221\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "class Cidade:\n",
        "    def __init__(self):\n",
        "        self.codigo = 0\n",
        "        self.nome = \"\"\n",
        "        self.populacao = 0\n",
        "        self.area = 0.0\n",
        "        self.pib = 0.0\n",
        "        self.pontos_turisticos = 0\n",
        "        self.pib_per_capita = 0.0\n",
        "        self.densidade_demo = 0.0\n",
        "\n",
        "class Estado:\n",
        "    def __init__(self):\n",
        "        self.nome = \"\"\n",
        "        self.cidades = [Cidade() for _ in range(4)]  # 4 cidades por estado\n",
        "\n",
        "# Funções auxiliares\n",
        "def calcular_pib_per_capita(pib, populacao):\n",
        "    return pib / populacao if populacao != 0 else 0\n",
        "\n",
        "def calcular_densidade_demo(populacao, area):\n",
        "    return populacao / area if area != 0 else 0\n",
        "\n",
        "def cadastrar_cidade(cidade, nome_estado, num_cidade):\n",
        "    print(f\"\\n  Cadastro da Cidade {num_cidade+1} de 4 do Estado {nome_estado}\")\n",
        "\n",
        "    cidade.codigo = int(input(\"  Código da cidade: \"))\n",
        "    cidade.nome = input(\"  Nome da cidade: \")\n",
        "    cidade.populacao = int(input(\"  População: \"))\n",
        "    cidade.area = float(input(\"  Área (em km²): \"))\n",
        "    cidade.pib = float(input(\"  PIB: \"))\n",
        "    cidade.pontos_turisticos = int(input(\"  Número de pontos turísticos: \"))\n",
        "\n",
        "    # Calcula métricas\n",
        "    cidade.pib_per_capita = calcular_pib_per_capita(cidade.pib, cidade.populacao)\n",
        "    cidade.densidade_demo = calcular_densidade_demo(cidade.populacao, cidade.area)\n",
        "\n",
        "def cadastrar_estado(estados):\n",
        "    for i in range(8):  # 8 estados\n",
        "        estados.append(Estado())\n",
        "        print(f\"\\n--- Cadastro do Estado {i+1} de 8 ---\")\n",
        "        estados[i].nome = input(\"Nome do estado: \")\n",
        "\n",
        "        for j in range(4):  # 4 cidades por estado\n",
        "            cadastrar_cidade(estados[i].cidades[j], estados[i].nome, j)\n",
        "\n",
        "def exibir_dados(estados):\n",
        "    print(\"\\n=== DADOS CADASTRADOS ===\")\n",
        "\n",
        "    for estado in estados:\n",
        "        print(f\"\\n--- Estado: {estado.nome} ---\")\n",
        "\n",
        "        for j, cidade in enumerate(estado.cidades, 1):\n",
        "            print(f\"\\n  Cidade {j}:\")\n",
        "            print(f\"    Código: {cidade.codigo}\")\n",
        "            print(f\"    Nome: {cidade.nome}\")\n",
        "            print(f\"    População: {cidade.populacao}\")\n",
        "            print(f\"    Área: {cidade.area:.2f} km²\")\n",
        "            print(f\"    PIB: {cidade.pib:.2f}\")\n",
        "            print(f\"    Pontos Turísticos: {cidade.pontos_turisticos}\")\n",
        "            print(f\"    PIB per capita: {cidade.pib_per_capita:.2f}\")\n",
        "            print(f\"    Densidade demográfica: {cidade.densidade_demo:.2f} hab/km²\")\n",
        "\n",
        "def exibir_menu_comparacao():\n",
        "    print(\"\\n=== MENU DE COMPARAÇÃO ===\")\n",
        "    print(\"1. Cidade com maior PIB\")\n",
        "    print(\"2. Cidade com maior população\")\n",
        "    print(\"3. Cidade com maior PIB per capita\")\n",
        "    print(\"4. Cidade com menor densidade demográfica\")\n",
        "    print(\"5. Cidade com mais pontos turísticos\")\n",
        "    print(\"6. Exibir todos os dados cadastrados\")\n",
        "    print(\"0. Sair\")\n",
        "    return input(\"Escolha uma opção: \")\n",
        "\n",
        "def encontrar_melhor_cidade(estados, criterio):\n",
        "    melhor_cidade = estados[0].cidades[0]\n",
        "\n",
        "    for estado in estados:\n",
        "        for cidade in estado.cidades:\n",
        "            if criterio == 1 and cidade.pib > melhor_cidade.pib:\n",
        "                melhor_cidade = cidade\n",
        "            elif criterio == 2 and cidade.populacao > melhor_cidade.populacao:\n",
        "                melhor_cidade = cidade\n",
        "            elif criterio == 3 and cidade.pib_per_capita > melhor_cidade.pib_per_capita:\n",
        "                melhor_cidade = cidade\n",
        "            elif criterio == 4 and cidade.densidade_demo < melhor_cidade.densidade_demo:\n",
        "                melhor_cidade = cidade\n",
        "            elif criterio == 5 and cidade.pontos_turisticos > melhor_cidade.pontos_turisticos:\n",
        "                melhor_cidade = cidade\n",
        "\n",
        "    return melhor_cidade\n",
        "\n",
        "def main():\n",
        "    estados = []\n",
        "    print(\"=== CADASTRO DO SUPER TRUNFO DE CIDADES ===\")\n",
        "    cadastrar_estado(estados)\n",
        "\n",
        "    while True:\n",
        "        opcao = exibir_menu_comparacao() # Indented this line\n",
        "\n",
        "        if opcao == '0':\n",
        "            break\n",
        "        elif opcao in ('1', '2', '3', '4', '5'):\n",
        "            criterio = int(opcao)\n",
        "            melhor = encontrar_melhor_cidade(estados, criterio)\n",
        "\n",
        "            print(\"\\n--- Melhor Cidade ---\")\n",
        "            # Encontrar o estado da cidade (melhoria possível)\n",
        "            estado_da_cidade = next(e for e in estados if melhor in e.cidades)\n",
        "            print(f\"Estado: {estado_da_cidade.nome}\")\n",
        "            print(f\"Cidade: {melhor.nome}\")\n",
        "            print(f\"Código: {melhor.codigo}\")\n",
        "\n",
        "            if criterio == 1:\n",
        "                print(f\"PIB: {melhor.pib:.2f}\")\n",
        "            elif criterio == 2:\n",
        "                print(f\"População: {melhor.populacao}\")\n",
        "            elif criterio == 3:\n",
        "                print(f\"PIB per capita: {melhor.pib_per_capita:.2f}\")\n",
        "            elif criterio == 4:\n",
        "                print(f\"Densidade demográfica: {melhor.densidade_demo:.2f} hab/km²\")\n",
        "            elif criterio == 5:\n",
        "                print(f\"Pontos turísticos: {melhor.pontos_turisticos}\")\n",
        "        elif opcao == '6':\n",
        "            exibir_dados(estados)\n",
        "        else:\n",
        "            print(\"Opção inválida!\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    }
  ]
}